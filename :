// $Id: ubigint.cpp,v 1.1 2016-04-03 15:10:10-07 - - $

#include <cstdlib>
#include <exception>
#include <stack>
#include <stdexcept>
using namespace std;

#include "ubigint.h"
#include "debug.h"

ubigint::ubigint (unsigned long that): ubig_value (that) {
   DEBUGF ('~', this << " -> " << ubig_value)
}

ubigint::ubigint (const string& that): ubig_value(0) {
   int i;
   int place=0;
   udigit digit;
   for (i = that.size()-1;i>=0;i--){
      place++;
      digit = that[i];
      ubig_value.push_back(place * 10 + digit - '0';
   }
   
}

void trim(ubigint& item){
   while(item.ubig_value.size()>0 and item.ubig_value.back()==0) item.ubig_value.pop_back();
}

ubigint ubigint::operator+ (const ubigint& that) const {
   //return ubigint (uvalue + that.uvalue);
   bool carry = false;
   ubigint result;
   udigit digit, this_digit, that_digit;
   int loop_size = ubig_value.size() > that.ubig_value.size()? ubig_value.size() : that.ubig_value.size();
   for (int i=0; i<loop_size;i++){
      if (ubig_value.size() < i+1) {
         this_digit=0;
      }else{
         this_digit = ubig_value.at(i);
      }if(that.ubig_value.size() < i+1){
         that_digit = 0;
      }else{
         that_digit = ubig_value.at(i);
      }
      digit = (this_digit + that_digit);
      if(carry){
         digit = digit + 1;
         carry = false;
      }
      if(digit/10 > 0) carry = true;
      digit = digit%10;
      result.push_back(digit);
   }
   trim(result);
   return result;
}

ubigint ubigint::operator- (const ubigint& that) const {
   if (*this < that) throw domain_error ("ubigint::operator-(a<b)");
   //return ubigint (uvalue - that.uvalue);
   udigit digit, this_digit, that_digit;
   ubigint result;
   bool carry;
   for(int i =0; i < ubig_value.size();i++){
      if(that.ubig_value.size()<i+1){
         that_digit=0;
      }else{
         that_digit=that.ubig_value.at(i);
      }
      this_digit=ubig_value.at(i);
      digit=this_digit-that_digit;
      if(carry){
         digit = digit-1;
         carry=false;
      }
      if(digit<0){
         digit = digit+10;
         carry = true;
      }
      result.push_back(digit);
   }
   trim(result);
   return result;
}

ubigint ubigint::operator* (const ubigint& that) const {
   //return ubigint (uvalue * that.uvalue);
   ubigint result;
   udigit c, partial_inner, partial_outer, digit;
   partial_inner=0;
   partial_outer=0;
   int i, j;
   for(i=0;i<ubig_value.size()-1;i++){
      c = 0;
      for(j=0;j<that.ubig_value.size()-1;j++){
         digit = partial_inner + ubig_value.at(i)*that.ubig_value.at(j) + c;
         partial_inner = digit%10;
         c = digit/10;
      }
      partial_outer = c;
   }
}

void ubigint::multiply_by_2() {
   ubig_value= ubig_value + ubig_value
}

void ubigint::divide_by_2() {
   uvalue /= 2;
}


struct quo_rem { ubigint quotient; ubigint remainder; };
quo_rem udivide (const ubigint& dividend, ubigint divisor) {
   // Note: divisor is modified so pass by value (copy).
   ubigint zero {0};
   if (divisor == zero) throw domain_error ("udivide by zero");
   ubigint power_of_2 {1};
   ubigint quotient {0};
   ubigint remainder {dividend}; // left operand, dividend
   while (divisor < remainder) {
      divisor.multiply_by_2();
      power_of_2.multiply_by_2();
   }
   while (power_of_2 > zero) {
      if (divisor <= remainder) {
         remainder = remainder - divisor;
         quotient = quotient + power_of_2;
      }
      divisor.divide_by_2();
      power_of_2.divide_by_2();
   }
   return {.quotient = quotient, .remainder = remainder};
}

ubigint ubigint::operator/ (const ubigint& that) const {
   return udivide (*this, that).quotient;
}

ubigint ubigint::operator% (const ubigint& that) const {
   return udivide (*this, that).remainder;
}

bool ubigint::operator== (const ubigint& that) const {
   return uvalue == that.uvalue;
}

bool ubigint::operator< (const ubigint& that) const {
   return uvalue < that.uvalue;
}

ostream& operator<< (ostream& out, const ubigint& that) { 
   return out << "ubigint(" << that.uvalue << ")";
}


